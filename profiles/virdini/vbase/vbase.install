<?php

/**
 * Implements hook_install().
 */
function vbase_install() {

}

/**
 * Implements hook_install_tasks().
 */
function vbase_install_tasks(&$install_state) {
  return [
    'vbase_final_setup' => [],
  ];
}

function vbase_final_setup(&$install_state) {
  $config = \Drupal::configFactory();
  // Disable detailed cron logging
  $config->getEditable('system.cron')
    ->set('logging', FALSE)
    ->save(TRUE);
  // Disable the user pictures on nodes.
  $config->getEditable('system.theme.global')
    ->set('features.node_user_picture', FALSE)
    ->save(TRUE);
  // Disable gzip compression
  $config->getEditable('system.performance')
    ->set('css.gzip', FALSE)
    ->set('js.gzip', FALSE)
    ->save(TRUE);
  // Disable advagg brotli compression
  $config->getEditable('advagg.settings')
    ->set('css.brotli', FALSE)
    ->set('js.brotli', FALSE)
    ->save(TRUE);
  // Set advagg js minifer to JSqueeze and hide licensing comments
  $config->getEditable('advagg_js_minify.settings')
    ->set('add_license', FALSE)
    ->set('minifier', 5)
    ->save(TRUE);
  // Disable views live preview
  $config->getEditable('views.settings')
    ->set('ui.always_live_preview', FALSE)
    ->save(TRUE);
  // Disable unnecessary views
  $config->getEditable('views.view.content_recent')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.frontpage')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.taxonomy_term')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.who_s_new')
    ->set('status', FALSE)
    ->save(TRUE);
  $config->getEditable('views.view.who_s_online')
    ->set('status', FALSE)
    ->save(TRUE);

  // Add indexes
  _vbase_add_indexes();
}

/**
 * Remove Virdini Optimize effect
 */
function vbase_update_8001() {
  if (\Drupal::service('module_handler')->moduleExists('imagick')){
    foreach (\Drupal::entityTypeManager()->getStorage('image_style')->loadMultiple() as $style) {
      foreach ($style->getEffects() as $id => $effect) {
        if ($effect->getPluginId() == 'image_voptimize') {
          $style->deleteImageEffect($effect);
        }
      }
    }
  }
}

/**
 * Add base fields 'Published from' and 'Unpublished from' to nodes
 */
function vbase_update_8005() {
  // Install fields
  $manager = \Drupal::service('entity.definition_update_manager');
  if ($manager->needsUpdates()) {
    /**
     * @see https://www.drupal.org/node/3034742
     */
    $fields = $manager->getChangeList();
    $storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('node');
    foreach (['pubdate', 'unpubdate'] as $field) {
      if (isset($fields['node']['field_storage_definitions'][$field])
          && isset($storage_definitions[$field])
          && $fields['node']['field_storage_definitions'][$field] == $manager::DEFINITION_CREATED) {
        $manager->installFieldStorageDefinition($field, 'node', 'vbase', $storage_definitions[$field]);
      }
    }
  }
  // Add indexes
  _vbase_add_indexes();
}

/**
 * Add indexes for base fields 'Published from' and 'Unpublished from'
 */
function _vbase_add_indexes() {
  $db = \Drupal::database();
  $entity_type = \Drupal::entityTypeManager()->getDefinition('node');
  $table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
  $schema = $db->schema();
  foreach (['pubdate' => 'pubstatus', 'unpubdate' => 'unpubstatus'] as $field => $index) {
    if (!$schema->indexExists($table, $index)) {
      $spec = [
        'fields' => [
          'status' => [
            'type' => 'int',
          ],
          $field => [
            'type' => 'int',
          ],
        ],
      ];
      $schema->addIndex($table, $index, ['status', $field], $spec);
    }
  }
}

